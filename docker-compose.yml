version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: skema-postgres
    environment:
      POSTGRES_DB: skema
      POSTGRES_USER: skema_user
      POSTGRES_PASSWORD: skema_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./Backend/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U skema_user -d skema"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - skema-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: skema-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - skema-network
    command: redis-server --appendonly yes

  # FastAPI Backend
  backend:
    image: python:3.11-slim
    container_name: skema-backend
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://skema_user:skema_password@postgres:5432/skema
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-development-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ENVIRONMENT=development
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./Backend:/app
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - skema-network
    command: >
      sh -c "
        apt-get update && apt-get install -y gcc libpq-dev curl &&
        pip install --no-cache-dir -r requirements.txt &&
        echo 'Starting FastAPI server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Next.js Frontend
  frontend:
    image: node:18-alpine
    container_name: skema-frontend
    working_dir: /app
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_APP_NAME=Skema
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./Frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - skema-network
    command: >
      sh -c "
        npm install &&
        echo 'Starting Next.js server...' &&
        npm run dev
      "


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  skema-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16